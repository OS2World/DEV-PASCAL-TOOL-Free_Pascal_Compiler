 
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title>6.3 Calling mechanism</title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cis.ohio-state.edu/~gurari/TeX4ht/mn.htm)"> 
<!--html,4,png,sections+--> 
<meta name="src" content="prog.tex"> 
<meta name="date" content="2003-05-30 22:37:00"> 
<link rel="stylesheet" type="text/css" href="prog.css"> 
</head><body 
>
<div class="crosslinks"><p class="noindent">[<a 
href="progse20.htm" >next</a>] [<a 
href="progse18.htm" >prev</a>] [<a 
href="progse18.htm#tailprogse18.htm" >prev-tail</a>] [<a 
href="#tailprogse19.htm">tail</a>] [<a 
href="progch6.htm#progse19.htm" >up</a>] </p></div>
<h3 class="sectionHead"><span class="titlemark">6.3</span> <a 
href="prog.htm#QQ2-115-116" name="x115-1120006.3">Calling mechanism</a></h3>
<!--l. 2543--><p class="noindent">Procedures and Functions are called with their parameters on the stack. Contrary to
Turbo Pascal, <span 
class="cmti-10">all </span>parameters are pushed on the stack, and they are pushed <span 
class="cmti-10">right </span>to
<span 
class="cmti-10">left</span>, instead of left to right for Turbo Pascal. This is especially important if you have
some assembly subroutines in Turbo Pascal which you would like to translate to Free
Pascal.
<!--l. 2549--><p class="noindent">Function results are returned in the accumulator, if they fit in the register. Methods calls (from
either objects or clases) have an additional invisible parameter which is <span 
class="cmtt-10">self</span>. This parameter is
the leftmost parameter within a method call (it is therefore the last parameter passed to the
method).
<!--l. 2555--><p class="noindent">When the procedure or function exits, it clears the stack.
<!--l. 2557--><p class="noindent">Other calling methods are available for linking with external object files and libraries, these are
summarized in table (<a 
href="#x115-1120013">6.3<!--tex4ht:ref: tab:CallingTable--></a>). The first column lists the modifier you specify for a procedure
declaration. The second one lists the order the paramaters are pushed on the stack. The third
column specifies who is responsible for cleaning the stack: the caller or the called function. The
alignment column indicates the alignment of the parameters sent to the stack area.
Finally, the fifth column indicates if any registers are saved in the entry code of the
subroutine.
                                                                            

                                                                            
<a 
  name="x115-1120013"></a>
<hr class="float"><div align="center" class="float" 
><table class="float"><tr class="float"><td class="float" 
>
                                                                            

                                                                            
<br> <div align="center" class="caption"><table class="caption" 
><tr valign="baseline" class="caption"><td class="id">Table&nbsp;6.3: </td><td  
class="content">Calling mechanisms in Free Pascal</td></tr></table></div><!--tex4ht:label?: x115-1120013-->
<div class="center" 
>
<!--tex4ht:inline--><div class="tabular"><table class="tabular" 
cellspacing="0pt" cellpadding="0"  
frame="void" id="TBL-6-" ><colgroup id="TBL-6-1g"><col 
id="TBL-6-1"><col 
id="TBL-6-2"><col 
id="TBL-6-3"><col 
id="TBL-6-4"><col 
id="TBL-6-5"></colgroup><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
valign="baseline" id="TBL-6-1-"><td  align="left" nowrap="nowrap" id="TBL-6-1-1"  
class="td11"> Modifier </td><td  align="left" nowrap="nowrap" id="TBL-6-1-2"  
class="td11"> Pushing order</td><td  align="left" nowrap="nowrap" id="TBL-6-1-3"  
class="td11"> Stack cleaned by</td><td  align="left" nowrap="nowrap" id="TBL-6-1-4"  
class="td11"> alignment        </td><td  align="left" nowrap="nowrap" id="TBL-6-1-5"  
class="td11"> registers saved</td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
valign="baseline" id="TBL-6-2-"><td  align="left" nowrap="nowrap" id="TBL-6-2-1"  
class="td11"> ¡none¿   </td><td  align="left" nowrap="nowrap" id="TBL-6-2-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-2-3"  
class="td11"> Function          </td><td  align="left" nowrap="nowrap" id="TBL-6-2-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-2-5"  
class="td11"> None            </td>
</tr><tr  
valign="baseline" id="TBL-6-3-"><td  align="left" nowrap="nowrap" id="TBL-6-3-1"  
class="td11"> cdecl     </td><td  align="left" nowrap="nowrap" id="TBL-6-3-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-3-3"  
class="td11"> Caller              </td><td  align="left" nowrap="nowrap" id="TBL-6-3-4"  
class="td11"> GCC alignment</td><td  align="left" nowrap="nowrap" id="TBL-6-3-5"  
class="td11"> GCC registers</td>
</tr><tr  
valign="baseline" id="TBL-6-4-"><td  align="left" nowrap="nowrap" id="TBL-6-4-1"  
class="td11"> interrupt</td><td  align="left" nowrap="nowrap" id="TBL-6-4-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-4-3"  
class="td11"> Function          </td><td  align="left" nowrap="nowrap" id="TBL-6-4-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-4-5"  
class="td11"> all registers    </td>
</tr><tr  
valign="baseline" id="TBL-6-5-"><td  align="left" nowrap="nowrap" id="TBL-6-5-1"  
class="td11"> pascal    </td><td  align="left" nowrap="nowrap" id="TBL-6-5-2"  
class="td11"> Left-to-right  </td><td  align="left" nowrap="nowrap" id="TBL-6-5-3"  
class="td11"> Function          </td><td  align="left" nowrap="nowrap" id="TBL-6-5-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-5-5"  
class="td11"> None            </td>
</tr><tr  
valign="baseline" id="TBL-6-6-"><td  align="left" nowrap="nowrap" id="TBL-6-6-1"  
class="td11"> safecall  </td><td  align="left" nowrap="nowrap" id="TBL-6-6-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-6-3"  
class="td11"> Function          </td><td  align="left" nowrap="nowrap" id="TBL-6-6-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-6-5"  
class="td11"> GCC registers</td>
</tr><tr  
valign="baseline" id="TBL-6-7-"><td  align="left" nowrap="nowrap" id="TBL-6-7-1"  
class="td11"> stdcall   </td><td  align="left" nowrap="nowrap" id="TBL-6-7-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-7-3"  
class="td11"> Function          </td><td  align="left" nowrap="nowrap" id="TBL-6-7-4"  
class="td11"> GCC alignment</td><td  align="left" nowrap="nowrap" id="TBL-6-7-5"  
class="td11"> GCC registers</td>
</tr><tr  
valign="baseline" id="TBL-6-8-"><td  align="left" nowrap="nowrap" id="TBL-6-8-1"  
class="td11"> popstack</td><td  align="left" nowrap="nowrap" id="TBL-6-8-2"  
class="td11"> Right-to-left  </td><td  align="left" nowrap="nowrap" id="TBL-6-8-3"  
class="td11"> Caller              </td><td  align="left" nowrap="nowrap" id="TBL-6-8-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-8-5"  
class="td11"> None            </td>
</tr><tr  
valign="baseline" id="TBL-6-9-"><td  align="left" nowrap="nowrap" id="TBL-6-9-1"  
class="td11"> register  </td><td  align="left" nowrap="nowrap" id="TBL-6-9-2"  
class="td11"> Left-to-right  </td><td  align="left" nowrap="nowrap" id="TBL-6-9-3"  
class="td11"> Caller              </td><td  align="left" nowrap="nowrap" id="TBL-6-9-4"  
class="td11"> default            </td><td  align="left" nowrap="nowrap" id="TBL-6-9-5"  
class="td11"> None            </td>
</tr><tr 
class="hline"><td><hr></td><td><hr></td><td><hr></td><td><hr></td><td><hr></td></tr><tr  
valign="baseline" id="TBL-6-10-"><td  align="left" nowrap="nowrap" id="TBL-6-10-1"  
class="td11">             </td>
</tr><!--lllll--></table>
</div></div>
                                                                            

                                                                            
</td></tr></table></div><hr class="endfloat">
More about this can be found in chapter <a 
href="progch7.htm#x126-1230007">7<!--tex4ht:ref: ch:Linking--></a>, page <a 
href="progch7.htm#x126-1230007">273<!--tex4ht:ref: ch:Linking--></a> on linking. Information on GCC registers
saved, GCC stack alignment and general stack alignment on an operating system basis can be
found in Appendix <a 
href="progap8.htm#x267-268000H">H<!--tex4ht:ref: ch:AppH--></a>. The <span 
class="cmtt-10">register </span>modifier is currently not supported, and maps to the default
calling convention.
<!--l. 2586--><p class="noindent">Furthermore, the <span 
class="cmtt-10">saveregisters </span>modifier can be used with any of the calling mechanism
specifiers. When <span 
class="cmtt-10">saveregisters </span>is used, all registers will be saved on entry to the routine, and will
be restored upon exit. Of course, if the routine is a function, and it normally returns its retun value
in a register, that register will not be saved. Also, if the self register is used, it will also neither be
saved nor restored.
                                                                            

                                                                            
<div class="crosslinks"><p class="noindent">[<a 
href="progse20.htm" >next</a>] [<a 
href="progse18.htm" >prev</a>] [<a 
href="progse18.htm#tailprogse18.htm" >prev-tail</a>] [<a 
href="progse19.htm" >front</a>] [<a 
href="progch6.htm#progse19.htm" >up</a>] </p></div><a 
  name="tailprogse19.htm"></a>  
</body></html> 
