 
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title>10.3 Optimization switches</title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cis.ohio-state.edu/~gurari/TeX4ht/mn.htm)"> 
<!--html,4,png,sections+--> 
<meta name="src" content="prog.tex"> 
<meta name="date" content="2003-05-30 22:37:00"> 
<link rel="stylesheet" type="text/css" href="prog.css"> 
</head><body 
>
<div class="crosslinks"><p class="noindent">[<a 
href="progse41.htm" >next</a>] [<a 
href="progse39.htm" >prev</a>] [<a 
href="progse39.htm#tailprogse39.htm" >prev-tail</a>] [<a 
href="#tailprogse40.htm">tail</a>] [<a 
href="progch10.htm#progse40.htm" >up</a>] </p></div>
<h3 class="sectionHead"><span class="titlemark">10.3</span> <a 
href="prog.htm#QQ2-194-216" name="x194-19600010.3">Optimization switches</a></h3>
<!--l. 4754--><p class="noindent">This is where the various optimizing switches and their actions are described, grouped per
switch.
     <dl class="description"><dt class="description">
<span 
class="cmbx-10">-On:</span>&nbsp; </dt><dd 
class="description">with n = 1..3: these switches activate the optimizer. A higher level automatically includes all
     lower levels.
         <ul class="itemize1">
         <li class="itemize">Level 1 (<span 
class="cmtt-10">-O1</span>) activates the peephole optimizer (common instruction sequences are
         replaced by faster equivalents).
         </li>
         <li class="itemize">Level 2 (<span 
class="cmtt-10">-O2</span>) enables the assembler data flow analyzer, which allows the common
         subexpression elimination procedure to remove unnecessary reloads of registers
         with values they already contain.
         </li>
         <li class="itemize">Level 3 (<span 
class="cmtt-10">-O3</span>) enables uncertain optimizations. For more info, see -Ou.</li></ul>
     </dd><dt class="description">
<span 
class="cmbx-10">-OG:</span>&nbsp; </dt><dd 
class="description">This causes the code generator (and optimizer, IF activated), to favor faster, but code-wise
     larger, instruction sequences (such as &#8221;<span class="obeylines-h"><span 
class="cmtt-10">subl</span>&nbsp;<span 
class="cmtt-10">$4,%esp</span></span>&#8221;) instead of slower, smaller instructions
     (&#8221;<span class="obeylines-h"><span 
class="cmtt-10">enter</span>&nbsp;<span 
class="cmtt-10">$4</span></span>&#8221;). This is the default setting.
     </dd><dt class="description">
<span 
class="cmbx-10">-Og:</span>&nbsp; </dt><dd 
class="description">This one is exactly the reverse of -OG, and as such these switches are mutually exclusive:
     enabling one will disable the other.
     </dd><dt class="description">
<span 
class="cmbx-10">-Or:</span>&nbsp; </dt><dd 
class="description">This setting causes the code generator to check which variables are used most, so it can keep
     those in a register.
     </dd><dt class="description">
<span 
class="cmbx-10">-Opn:</span>&nbsp; </dt><dd 
class="description">with n = 1..3: Setting the target processor does NOT activate the optimizer. It merely
     influences the code generator and, if activated, the optimizer:
         <ul class="itemize1">
         <li class="itemize">During the code generation process, this setting is used to decide whether a jump
         table or a sequence of successive jumps provides the best performance in a case
         statement.
         </li>
         <li class="itemize">The peephole optimizer takes a number of decisions based on this setting, for example it
         translates certain complex instructions, such as
                                                                            

                                                                            
         <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
         &nbsp;movzbl&nbsp;(mem),&nbsp;%eax|
</pre>
         </td></tr></table>to a combination of simpler instructions
                                                                            

                                                                            
         <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
         &nbsp;xorl&nbsp;%eax,&nbsp;%eax
         &nbsp;movb&nbsp;(mem),&nbsp;%al
</pre>
         </td></tr></table>for the Pentium.</li></ul>
     </dd><dt class="description">
<span 
class="cmbx-10">-Ou:</span>&nbsp; </dt><dd 
class="description">This enables uncertain optimizations. You cannot use these always, however. The previous
     section explains when they can be used, and when they cannot be used.</dd></dl>
                                                                            

                                                                            
<div class="crosslinks"><p class="noindent">[<a 
href="progse41.htm" >next</a>] [<a 
href="progse39.htm" >prev</a>] [<a 
href="progse39.htm#tailprogse39.htm" >prev-tail</a>] [<a 
href="progse40.htm" >front</a>] [<a 
href="progch10.htm#progse40.htm" >up</a>] </p></div><a 
  name="tailprogse40.htm"></a>  
</body></html> 
