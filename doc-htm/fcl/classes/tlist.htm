<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<title>TList</title>
<link rel="stylesheet" type="text/css" href="../fpdoc.css">
</head>
<body>
<table cellpadding="4" cellspacing="0" border="0" width="100%" class="bar">
<tr>
<td><b>[<a href="../classes/index.htm">Overview</a>][<a href="../classes/index-2.htm">Constants</a>][<a href="../classes/index-3.htm">Types</a>][<a href="../classes/index-4.htm">Classes</a>][<a href="../classes/index-5.htm">Procedures and functions</a>][<a href="../classes/index-6.htm">Variables</a>]</b></td>
<td align="right"><span class="bartitle">Reference for unit 'Classes' (<a href="../index.htm">#fcl</a>)</span></td>
</tr>
</table>
<h1>TList</h1>
<p>[<a href="../classes/tlist-1.htm" onClick="window.open('../classes/tlist-1.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">Properties</a> (<a href="../classes/tlist-2.htm" onClick="window.open('../classes/tlist-2.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">by Name</a>)] [<a href="../classes/tlist-3.htm" onClick="window.open('../classes/tlist-3.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">Methods</a> (<a href="../classes/tlist-4.htm" onClick="window.open('../classes/tlist-4.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">by Name</a>)] [<a href="../classes/tlist-5.htm" onClick="window.open('../classes/tlist-5.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">Events</a> (<a href="../classes/tlist-6.htm" onClick="window.open('../classes/tlist-6.htm', 'list', 'dependent=yes,resizable=yes,scrollbars=yes,height=400,width=300'); return false;">by Name</a>)] </p>
<p>Class to manage collections of pointers.</p>
<h2>Declaration</h2>
<table cellspacing="0" cellpadding="0">
<tr>
<td><p><tt><nobr><span class="kw">type</span> TList <span class="sym">=</span> <span class="kw">class</span><span class="sym">(</span>TObject<span class="sym">)</span></nobr></tt></p></td>
</tr>
<tr>
<td><p><tt><nobr><span class="kw">protected</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.get.htm">Get</a><span class="sym">();</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.grow.htm">Grow</a><span class="sym">;</span><span class="kw"> virtual</span><span class="sym">;</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.put.htm">Put</a><span class="sym">();</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.notify.htm">Notify</a><span class="sym">();</span><span class="kw"> virtual</span><span class="sym">;</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.setcapacity.htm">SetCapacity</a><span class="sym">();</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.setcount.htm">SetCount</a><span class="sym">();</span></nobr></tt></p></td>
</tr>
<tr>
<td><p><tt><nobr><span class="kw">public</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">destructor </span><a href="../classes/tlist.destroy.htm">Destroy</a><span class="sym">;</span><span class="kw"> override</span><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Destroys the list and releases the memory used to store the list elements. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.add.htm">Add</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Adds a new pointer to the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.clear.htm">Clear</a><span class="sym">;</span><span class="kw"> dynamic</span><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Clears the pointer list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.delete.htm">Delete</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Removes a pointer from the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.error.htm">Error</a><span class="sym">();</span><span class="kw"> virtual</span><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Raises an <a href="../classes/elisterror.htm">EListError</a> exception. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.exchange.htm">Exchange</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Exchanges two pointers in the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.expand.htm">Expand</a><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Increases the capacity of the list if needed. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.extract.htm">Extract</a><span class="sym">();</span></nobr></tt></p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.first.htm">First</a><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Returns the first non-nil pointer in the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.indexof.htm">IndexOf</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Returns the index of a given pointer. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.insert.htm">Insert</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Inserts a new pointer in the list at a given position. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.last.htm">Last</a><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Returns the last non-nil pointer in the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.move.htm">Move</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Moves a pointer from one position in the list to another. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">function </span><a href="../classes/tlist.remove.htm">Remove</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Removes a value from the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.pack.htm">Pack</a><span class="sym">;</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Removes <var>Nil</var> pointers from the list and frees unused memory. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">procedure </span><a href="../classes/tlist.sort.htm">Sort</a><span class="sym">();</span></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Sorts the pointers in the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">property </span><a href="../classes/tlist.capacity.htm">Capacity</a><span class="sym">: </span>Integer<span class="sym">;</span>  [rw]</nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Current capacity (i.e. number of pointers that can be stored) of the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">property </span><a href="../classes/tlist.count.htm">Count</a><span class="sym">: </span>Integer<span class="sym">;</span>  [rw]</nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Current number of pointers in the list. </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">property </span><a href="../classes/tlist.items.htm">Items</a><span class="sym">: </span>Pointer<span class="sym">;</span><span class="kw"> default</span><span class="sym">;</span>  [rw]</nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Probides access to the pointers in the list.  </p></td>
</tr>
<tr>
<td valign="top"><p><tt><nobr>&nbsp;&nbsp;<span class="kw">property </span><a href="../classes/tlist.list.htm">List</a><span class="sym">: </span><a href="../classes/ppointerlist.htm">PPointerList</a><span class="sym">;</span>  [r]</nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Memory array where pointers are stored. </p></td>
</tr>
<tr>
<td><p><tt><nobr> <span class="kw">end</span><span class="sym">;</span></nobr></tt></p></td>
</tr>
</table>
<h2>Inheritance</h2>
<table cellspacing="0" cellpadding="0">
<tr>
<td valign="top" align="center"><p><tt><nobr><a href="../classes/tlist.htm">TList</a></nobr></tt></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Class to manage collections of pointers.</p></td>
</tr>
<tr>
<td align="center">|</td>
</tr>
<tr>
<td align="center"><p><tt><nobr>TObject</nobr></tt></p></td>
</tr>
</table>
<h2>Description</h2>
<p><var>TList</var> is a class that can be used to manage collections of pointers. It introduces methods and properties to store the pointers, search in the list of pointers, sort them. It manages its memory by itself, no intervention for that is needed. </p>
<p>To manage collections of strings, it is better to use a <a href="../classes/tstrings.htm">TStrings</a> descendent such as <a href="../classes/tstringlist.htm">TStringList</a>. To manage general objects, a <a href="../classes/tcollection.htm">TCollection</a> class exists, from which a descendent can be made to manage collections of various kinds. </p>
<h2>See also</h2>
<table cellspacing="0" cellpadding="0">
<tr>
<td valign="top"><p><a href="../classes/tstrings.htm">TStrings</a></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Class to manage arrays or collections of strings</p></td>
</tr>
<tr>
<td valign="top"><p><a href="../classes/tcollection.htm">TCollection</a></p></td>
<td><p>&nbsp;&nbsp;</p></td>
<td><p class="cmt">Base class to manage collections of named objects.</p></td>
</tr>
</table>
</body>
</html>
