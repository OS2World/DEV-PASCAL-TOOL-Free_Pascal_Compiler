 
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title>22.8 String handling functions</title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cis.ohio-state.edu/~gurari/TeX4ht/mn.htm)"> 
<!--html,3,png,sections+--> 
<meta name="src" content="units.tex"> 
<meta name="date" content="2003-05-30 22:24:00"> 
<link rel="stylesheet" type="text/css" href="units.css"> 
</head><body 
>
<div class="crosslinks"><p class="noindent">[<a 
href="unitsse78.htm" >prev</a>] [<a 
href="unitsse78.htm#tailunitsse78.htm" >prev-tail</a>] [<a 
href="#tailunitsse79.htm">tail</a>] [<a 
href="unitsch22.htm#unitsse79.htm" >up</a>] </p></div>
<h3 class="sectionHead"><span class="titlemark">22.8</span> <a 
href="units.htm#QQ2-106-898" name="x106-89200022.8">String handling functions</a></h3>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-899" name="x106-89300022.8">AdjustLineBreaks</a></h4><a 
  name="dx106-893001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AdjustLineBreaks(const S: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AdjustLineBreaks </span>will change all <span 
class="cmtt-10">#13 </span>characters with <span 
class="cmtt-10">#13#10 </span>on <span 
class="cmcsc-10">W<small 
class="small-caps">I</small><small 
class="small-caps">N</small><small 
class="small-caps">D</small><small 
class="small-caps">O</small><small 
class="small-caps">W</small><small 
class="small-caps">S</small> NT </span>and <span 
class="cmcsc-10"><small 
class="small-caps">D</small><small 
class="small-caps">O</small><small 
class="small-caps">S</small></span>.
On <span 
class="cmcsc-10"><small 
class="small-caps">L</small><small 
class="small-caps">I</small><small 
class="small-caps">N</small><small 
class="small-caps">U</small><small 
class="small-caps">X</small></span>, all <span 
class="cmtt-10">#13#10 </span>character pairs are converted to <span 
class="cmtt-10">#10 </span>and single <span 
class="cmtt-10">#13 </span>characters also.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1763--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex48.pp</span><HR/><div class="listinginput">
<!--l. 1763--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example48;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AdjustLineBreaks</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">'This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string'#13'with</span>&nbsp;<span 
class="cmtt-10">embedded'#10'linefeed</span>&nbsp;<span 
class="cmtt-10">and'+</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">#13'CR</span>&nbsp;<span 
class="cmtt-10">characters';</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(AdjustLineBreaks(S));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-900" name="x106-89400022.8">AnsiCompareStr</a></h4><a 
  name="dx106-894001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiCompareStr(const S1, S2: string): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiCompareStr </span>compares two strings and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
                                                                            

                                                                            
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1777--><p class="noindent">the comparision takes into account Ansi characters, i.e. it takes care of strange accented characters.
Contrary to <span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), the comparision is case sensitive.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AdjustLineBreaks </span>(<a 
href="#x106-89300022.8">762<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1786--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex49.pp</span><HR/><div class="listinginput">
<!--l. 1786--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example49;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiCompareStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiCompareStr(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-901" name="x106-89500022.8">AnsiCompareText</a></h4><a 
  name="dx106-895001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiCompareText(const S1, S2: string): integer;</span>
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiCompareText </span>compares two strings and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1801--><p class="noindent">the comparision takes into account Ansi characters, i.e. it takes care of strange accented characters.
Contrary to <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>), the comparision is case insensitive.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AdjustLineBreaks </span>(<a 
href="#x106-89300022.8">762<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1810--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex50.pp</span><HR/><div class="listinginput">
<!--l. 1810--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example49;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiCompareText</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiCompareText(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
                                                                            

                                                                            
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-902" name="x106-89600022.8">AnsiExtractQuotedStr</a></h4><a 
  name="dx106-896001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiExtractQuotedStr(var Src: PChar; Quote: Char): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiExtractQuotedStr </span>Returns <span 
class="cmtt-10">Src </span>as a string, with <span 
class="cmtt-10">Quote </span>characters removed from the
beginning and end of the string, and double <span 
class="cmtt-10">Quote </span>characters replaced by a single <span 
class="cmtt-10">Quote</span>
characters. As such, it revereses the action of <span 
class="cmss-10">AnsiQuotedStr </span>(<a 
href="#x106-89900022.8">767<!--tex4ht:ref: se:TBufStream--></a>).
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiQuotedStr </span>(<a 
href="#x106-89900022.8">767<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1827--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex51.pp</span><HR/><div class="listinginput">
<!--l. 1827--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example51;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiQuotedStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='He</span>&nbsp;<span 
class="cmtt-10">said</span>&nbsp;<span 
class="cmtt-10">&#34;Hello&#34;</span>&nbsp;<span 
class="cmtt-10">and</span>&nbsp;<span 
class="cmtt-10">walked</span>&nbsp;<span 
class="cmtt-10">on';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:=AnsiQuotedStr(Pchar(S),'&#34;');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln(AnsiExtractQuotedStr(Pchar(S),'&#34;'));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-903" name="x106-89700022.8">AnsiLastChar</a></h4><a 
  name="dx106-897001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiLastChar(const S: string): PChar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list">This function returns a pointer to the last character of <span 
class="cmtt-10">S</span>. Since multibyte characters are
not yet supported, this is the same as <span 
class="cmtt-10">@S[Length(S)])</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiStrLastChar </span>(<a 
href="#x106-90200022.8">769<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1843--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex52.pp</span><HR/><div class="listinginput">
                                                                            

                                                                            
<!--l. 1843--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example52;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiLastChar</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">L</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">an</span>&nbsp;<span 
class="cmtt-10">ansistring.';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Last</span>&nbsp;<span 
class="cmtt-10">character</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',AnsiLastChar(S));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">L:=Longint(AnsiLastChar(S))-Longint(@S[1])+1;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Length</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',L);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-904" name="x106-89800022.8">AnsiLowerCase</a></h4><a 
  name="dx106-898001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiLowerCase(const s: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiLowerCase </span>converts the string  <span 
class="cmtt-10">S </span>to lowercase characters and returns the resulting
string. It takes into account the operating system language settings when doing this, so spcial
characters are converted correctly as well.
<!--l. 1856--><p class="noindent"><span 
class="cmti-10">Remark </span>On linux, no language setting is taken in account yet.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiUpperCase </span>(<a 
href="#x106-90700022.8">773<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiStrLower </span>(<a 
href="#x106-90500022.8">772<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiStrUpper </span>(<a 
href="#x106-90600022.8">773<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1863--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex53.pp</span><HR/><div class="listinginput">
<!--l. 1863--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example53;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiLowerCase</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',AnsiLowerCase(S))</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('AN</span>&nbsp;<span 
class="cmtt-10">UPPERCASE</span>&nbsp;<span 
class="cmtt-10">STRING');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('Some</span>&nbsp;<span 
class="cmtt-10">mixed</span>&nbsp;<span 
class="cmtt-10">STring');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('a</span>&nbsp;<span 
class="cmtt-10">lowercase</span>&nbsp;<span 
class="cmtt-10">string');</span>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-905" name="x106-89900022.8">AnsiQuotedStr</a></h4><a 
  name="dx106-899001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiQuotedStr(const S: string; Quote: char): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiQuotedString </span>quotes the string <span 
class="cmtt-10">S </span>and returns the result. This means that it puts the
<span 
class="cmtt-10">Quote </span>character at both the beginning and end of the string and replaces any occurrence of
<span 
class="cmtt-10">Quote </span>in <span 
class="cmtt-10">S </span>with 2 <span 
class="cmtt-10">Quote </span>characters. The action of <span 
class="cmtt-10">AnsiQuotedString </span>can be reversed by
<span 
class="cmss-10">AnsiExtractQuotedStr </span>(<a 
href="#x106-89600022.8">765<!--tex4ht:ref: se:TBufStream--></a>).
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiExtractQuotedStr </span>(<a 
href="#x106-89600022.8">765<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1881--><p class="noindent">For an example, see <span 
class="cmss-10">AnsiExtractQuotedStr </span>(<a 
href="#x106-89600022.8">765<!--tex4ht:ref: se:TBufStream--></a>)
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-906" name="x106-90000022.8">AnsiStrComp</a></h4><a 
  name="dx106-900001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrComp(S1, S2: PChar): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrComp </span>compares 2 <span 
class="cmtt-10">PChar </span>strings, and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1894--><p class="noindent">The comparision of the two strings is case-sensitive. The function does not yet take
internationalization settings into account.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1902--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex54.pp</span><HR/><div class="listinginput">
<!--l. 1902--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example54;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrComp</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
                                                                            

                                                                            
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiStrComp(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-907" name="x106-90100022.8">AnsiStrIComp</a></h4><a 
  name="dx106-901001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrIComp(S1, S2: PChar): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrIComp </span>compares 2 <span 
class="cmtt-10">PChar </span>strings, and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1916--><p class="noindent">The comparision of the two strings is case-insensitive. The function does not yet take
internationalization settings into account.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1924--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex55.pp</span><HR/><div class="listinginput">
                                                                            

                                                                            
<!--l. 1924--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example55;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrIComp</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiStrIComp(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-908" name="x106-90200022.8">AnsiStrLastChar</a></h4><a 
  name="dx106-902001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">function AnsiStrLastChar(Str: PChar): PChar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrLastChar  returns  a  pointer  to  the  last  character  of  Str.  Since</span>
<span 
class="cmtt-10">multibyte characters are not yet supported, this is the same as</span>
<span 
class="cmtt-10">StrEnd(Str)-1.</span>
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiLastChar </span>(<a 
href="#x106-89700022.8">765<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1940--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex58.pp</span><HR/><div class="listinginput">
<!--l. 1940--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example58;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrLastChar</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">L</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">P:='This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">an</span>&nbsp;<span 
class="cmtt-10">PChar</span>&nbsp;<span 
class="cmtt-10">string.';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Last</span>&nbsp;<span 
class="cmtt-10">character</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',AnsiStrLastChar(P));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">L:=Longint(AnsiStrLastChar(P))-Longint(P)+1;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Length</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">(',P,')</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',L);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-909" name="x106-90300022.8">AnsiStrLComp</a></h4><a 
  name="dx106-903001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrLComp(S1, S2: PChar; MaxLen: cardinal): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrLComp </span>compares the first <span 
class="cmtt-10">Maxlen </span>characters of 2 <span 
class="cmtt-10">PChar </span>strings, <span 
class="cmtt-10">S1 </span>and <span 
class="cmtt-10">S2</span>, and returns
the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1955--><p class="noindent">The comparision of the two strings is case-sensitive. The function does not yet take
internationalization settings into account.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1963--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex56.pp</span><HR/><div class="listinginput">
<!--l. 1963--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example56;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrLComp</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar;</span>&nbsp;<span 
class="cmtt-10">L</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiStrLComp(S1,S2,L);</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('First</span>&nbsp;<span 
class="cmtt-10">',L,'</span>&nbsp;<span 
class="cmtt-10">characters</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">are</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('those</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string',255);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">String',4);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','1</span>&nbsp;<span 
class="cmtt-10">string',0);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string.',9);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-910" name="x106-90400022.8">AnsiStrLIComp</a></h4><a 
  name="dx106-904001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrLIComp(S1, S2: PChar; MaxLen: cardinal): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrLIComp </span>compares the first <span 
class="cmtt-10">Maxlen </span>characters of 2 <span 
class="cmtt-10">PChar </span>strings, <span 
class="cmtt-10">S1 </span>and <span 
class="cmtt-10">S2</span>, and returns
the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 1978--><p class="noindent">The comparision of the two strings is case-insensitive. The function does not yet take
internationalization settings into account.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 1986--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex57.pp</span><HR/><div class="listinginput">
<!--l. 1986--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example57;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrLIComp</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar;</span>&nbsp;<span 
class="cmtt-10">L</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint);</span>
                                                                            

                                                                            
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=AnsiStrLIComp(S1,S2,L);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('First</span>&nbsp;<span 
class="cmtt-10">',L,'</span>&nbsp;<span 
class="cmtt-10">characters</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">are</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('those</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string',255);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('ONE</span>&nbsp;<span 
class="cmtt-10">STRING','one</span>&nbsp;<span 
class="cmtt-10">String',4);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','1</span>&nbsp;<span 
class="cmtt-10">STRING',0);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">STRING','one</span>&nbsp;<span 
class="cmtt-10">string.',9);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-911" name="x106-90500022.8">AnsiStrLower</a></h4><a 
  name="dx106-905001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrLower(Str: PChar): PChar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrLower </span>converts the PChar <span 
class="cmtt-10">Str </span>to lowercase characters and returns the resulting
pchar. Note that <span 
class="cmtt-10">Str </span>itself is modified, not a copy, as in the case of <span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>).
It takes into account the operating system language settings when doing this, so spcial
characters are converted correctly as well.
<!--l. 2002--><p class="noindent"><span 
class="cmti-10">Remark </span>On linux, no language setting is taken in account yet.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiStrUpper </span>(<a 
href="#x106-90600022.8">773<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2009--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex59.pp</span><HR/><div class="listinginput">
<!--l. 2009--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example59;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrLower</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
                                                                            

                                                                            
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',AnsiStrLower(S))</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('AN</span>&nbsp;<span 
class="cmtt-10">UPPERCASE</span>&nbsp;<span 
class="cmtt-10">STRING');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('Some</span>&nbsp;<span 
class="cmtt-10">mixed</span>&nbsp;<span 
class="cmtt-10">STring');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('a</span>&nbsp;<span 
class="cmtt-10">lowercase</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-912" name="x106-90600022.8">AnsiStrUpper</a></h4><a 
  name="dx106-906001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiStrUpper(Str: PChar): PChar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiStrUpper </span>converts the <span 
class="cmtt-10">PChar Str </span>to uppercase characters and returns the resulting
string. Note that <span 
class="cmtt-10">Str </span>itself is modified, not a copy, as in the case of <span 
class="cmss-10">AnsiUpperCase </span>(<a 
href="#x106-90700022.8">773<!--tex4ht:ref: se:TBufStream--></a>).
It takes into account the operating system language settings when doing this, so spcial
characters are converted correctly as well.
<!--l. 2023--><p class="noindent"><span 
class="cmti-10">Remark </span>On linux, no language setting is taken in account yet.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiUpperCase </span>(<a 
href="#x106-90700022.8">773<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiStrLower </span>(<a 
href="#x106-90500022.8">772<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2030--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex60.pp</span><HR/><div class="listinginput">
<!--l. 2030--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example60;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiStrUpper</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pchar);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',AnsiStrUpper(S))</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('AN</span>&nbsp;<span 
class="cmtt-10">UPPERCASE</span>&nbsp;<span 
class="cmtt-10">STRING');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('Some</span>&nbsp;<span 
class="cmtt-10">mixed</span>&nbsp;<span 
class="cmtt-10">STring');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('a</span>&nbsp;<span 
class="cmtt-10">lowercase</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-913" name="x106-90700022.8">AnsiUpperCase</a></h4><a 
  name="dx106-907001"></a>
                                                                            

                                                                            
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function AnsiUpperCase(const s: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AnsiUpperCase </span>converts the string <span 
class="cmtt-10">S </span>to uppercase characters and returns the resulting
string. It takes into account the operating system language settings when doing this, so spcial
characters are converted correctly as well.
<!--l. 2043--><p class="noindent"><span 
class="cmti-10">Remark </span>On linux, no language setting is taken in account yet.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiStrUpper </span>(<a 
href="#x106-90600022.8">773<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiStrLower </span>(<a 
href="#x106-90500022.8">772<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2050--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex61.pp</span><HR/><div class="listinginput">
<!--l. 2050--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example60;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AnsiUpperCase</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',AnsiUpperCase(S))</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('AN</span>&nbsp;<span 
class="cmtt-10">UPPERCASE</span>&nbsp;<span 
class="cmtt-10">STRING');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('Some</span>&nbsp;<span 
class="cmtt-10">mixed</span>&nbsp;<span 
class="cmtt-10">STring');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('a</span>&nbsp;<span 
class="cmtt-10">lowercase</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-914" name="x106-90800022.8">AppendStr</a></h4><a 
  name="dx106-908001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Procedure AppendStr(var Dest: String; const S: string);</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AppendStr </span>appends <span 
class="cmtt-10">S </span>to Dest.
<!--l. 2059--><p class="noindent">This function is provided for Delphi compatibility only, since it is completely equivalent to
<span 
class="cmtt-10">Dest:=Dest+S</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AssignStr </span>(<a 
href="#x106-90900022.8">775<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">NewStr </span>(<a 
href="unitsse49.htm#x71-61100017.3">548<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">DisposeStr </span>(<a 
href="unitsse49.htm#x71-61200017.3">548<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2067--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex62.pp</span><HR/><div class="listinginput">
                                                                            

                                                                            
<!--l. 2067--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example62;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AppendStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">an</span>&nbsp;<span 
class="cmtt-10">';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">AppendStr(S,'AnsiString');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('S</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">&#34;',S,'&#34;');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-915" name="x106-90900022.8">AssignStr</a></h4><a 
  name="dx106-909001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Procedure AssignStr(var P: PString; const S: string);</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">AssignStr </span>allocates <span 
class="cmtt-10">S </span>to P. The old value of <span 
class="cmtt-10">P </span>is disposed of.
<!--l. 2077--><p class="noindent">This function is provided for Delphi compatibility only. <span 
class="cmtt-10">AnsiStrings </span>are managed on the
heap and should be preferred to the mechanism of dynamically allocated strings.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">NewStr </span>(<a 
href="unitsse49.htm#x71-61100017.3">548<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AppendStr </span>(<a 
href="#x106-90800022.8">774<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">DisposeStr </span>(<a 
href="unitsse49.htm#x71-61200017.3">548<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2086--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex63.pp</span><HR/><div class="listinginput">
<!--l. 2086--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example63;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">AssignStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">PString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;<span 
class="cmtt-10">P:=NewStr('A</span>&nbsp;<span 
class="cmtt-10">first</span>&nbsp;<span 
class="cmtt-10">AnsiString');</span>
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Before:</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">&#34;',P^,'&#34;');</span>
<br>   &nbsp;<span 
class="cmtt-10">AssignStr(P,'A</span>&nbsp;<span 
class="cmtt-10">Second</span>&nbsp;<span 
class="cmtt-10">ansistring');</span>
<br>   &nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('After</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">&#34;',P^,'&#34;');</span>
<br>   &nbsp;<span 
class="cmtt-10">DisposeStr(P);</span>
<br>   <span 
class="cmtt-10">End.</span>
                                                                            

                                                                            
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-916" name="x106-91000022.8">BCDToInt</a></h4><a 
  name="dx106-910001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function BCDToInt(Value: integer): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">BCDToInt </span>converts a <span 
class="cmtt-10">BCD </span>coded integer to a normal integer.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">StrToInt </span>(<a 
href="#x106-93500022.8">804<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">IntToStr </span>(<a 
href="#x106-92300022.8">796<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2100--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex64.pp</span><HR/><div class="listinginput">
<!--l. 2100--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example64;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">BCDToInt</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(</span>&nbsp;<span 
class="cmtt-10">L</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint);</span>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(L,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',BCDToInt(L));</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit(10);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit(100);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit(1000);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-917" name="x106-91100022.8">CompareMem</a></h4><a 
  name="dx106-911001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function CompareMem(P1, P2: Pointer; Length: cardinal): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">CompareMem </span>compares, byte by byte, 2 memory areas pointed to by <span 
class="cmtt-10">P1 </span>and <span 
class="cmtt-10">P2</span>, for a length
of <span 
class="cmtt-10">L </span>bytes.
<!--l. 2111--><p class="noindent">It returns the following values:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if at some position the byte at <span 
class="cmtt-10">P1 </span>is less than the byte at the same postion at <span 
class="cmtt-10">P2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if all <span 
class="cmtt-10">L </span>bytes are the same.
    </dd><dt class="description">
<span 
class="cmbx-10">3</span></dt><dd 
class="description"></dd></dl>
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-918" name="x106-91200022.8">CompareStr</a></h4><a 
  name="dx106-912001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function CompareStr(const S1, S2: string): Integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">CompareStr </span>compares two strings, <span 
class="cmtt-10">S1 </span>and <span 
class="cmtt-10">S2</span>, and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 2135--><p class="noindent">The comparision of the two strings is case-sensitive. The function does not take internationalization
settings into account, it simply compares ASCII values.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">CompareText </span>(<a 
href="#x106-91300022.8">778<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2144--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex65.pp</span><HR/><div class="listinginput">
<!--l. 2144--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example65;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">CompareStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=CompareStr(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-919" name="x106-91300022.8">CompareText</a></h4><a 
  name="dx106-913001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function CompareText(const S1, S2: string): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">CompareText </span>compares two strings, <span 
class="cmtt-10">S1 </span>and <span 
class="cmtt-10">S2</span>, and returns the following result:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">¡0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&lt;S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1=S2</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">¿0</span></dt><dd 
class="description">if <span 
class="cmtt-10">S1&gt;S2</span>.</dd></dl>
<!--l. 2159--><p class="noindent">The comparision of the two strings is case-insensitive. The function does not take internationalization
settings into account, it simply compares ASCII values.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiCompareText </span>(<a 
href="#x106-89500022.8">763<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiCompareStr </span>(<a 
href="#x106-89400022.8">762<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">CompareStr </span>(<a 
href="#x106-91200022.8">777<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2168--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex66.pp</span><HR/><div class="listinginput">
<!--l. 2168--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example66;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">CompareText</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestIt</span>&nbsp;<span 
class="cmtt-10">(S1,S2</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">R</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Longint;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">R:=CompareText(S1,S2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S1,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R&lt;0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">write</span>&nbsp;<span 
class="cmtt-10">('less</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">')</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">R=0</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('equal</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">')</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('larger</span>&nbsp;<span 
class="cmtt-10">than</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',S2,'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">smaller</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','one</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit('One</span>&nbsp;<span 
class="cmtt-10">string','One</span>&nbsp;<span 
class="cmtt-10">tall</span>&nbsp;<span 
class="cmtt-10">string');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-920" name="x106-91400022.8">DisposeStr</a></h4><a 
  name="dx106-914001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Procedure DisposeStr(S: PString);</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">DisposeStr </span>removes the dynamically allocated string <span 
class="cmtt-10">S </span>from the heap, and releases the
occupied memory.
<!--l. 2180--><p class="noindent">This function is provided for Delphi compatibility only. <span 
class="cmtt-10">AnsiStrings </span>are managed on the
heap and should be preferred to the mechanism of dynamically allocated strings.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">NewStr </span>(<a 
href="unitsse49.htm#x71-61100017.3">548<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AppendStr </span>(<a 
href="#x106-90800022.8">774<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AssignStr </span>(<a 
href="#x106-90900022.8">775<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2189--><p class="noindent">For an example, see <span 
class="cmss-10">DisposeStr </span>(<a 
href="unitsse49.htm#x71-61200017.3">548<!--tex4ht:ref: se:TBufStream--></a>).
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-921" name="x106-91500022.8">FloatToStr</a></h4><a 
  name="dx106-915001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function FloatToStr(Value: Extended): String;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">FloatToStr </span>converts the floating point variable <span 
class="cmtt-10">Value </span>to a string representation. It will choose
the shortest possible notation of the two following formats:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">Fixed format</span></dt><dd 
class="description">will represent the string in fixed notation,
    </dd><dt class="description">
<span 
class="cmbx-10">Decimal format</span></dt><dd 
class="description">will represent the string in scientific notation.</dd></dl>
<!--l. 2202--><p class="noindent">(more information on these formats can be found in <span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>)) <span 
class="cmtt-10">FloatToStr </span>is completely
equivalent to a <span 
class="cmtt-10">FloatToStrF(Value, ffGeneral, 15, 0); </span>call.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FormatFloat </span>(<a 
href="#x106-92100022.8">794<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">StrToFloat </span>(<a 
href="#x106-93400022.8">803<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2211--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex67.pp</span><HR/><div class="listinginput">
<!--l. 2211--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example67;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FloatToStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(Value</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Extended);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(Value,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',FloatToStr(Value));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(-Value,'</span>&nbsp;<span 
class="cmtt-10">-&gt;</span>&nbsp;<span 
class="cmtt-10">',FloatToStr(-Value));</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(0.0);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e-3);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e-20);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e-200);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e+3);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e+20);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1e+200);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-922" name="x106-91600022.8">FloatToStrF</a></h4><a 
  name="dx106-916001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function FloatToStrF(Value: Extended; format: TFloatFormat; Precision,</span>
<span 
class="cmtt-10">Digits: Integer): String;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">FloatToStrF </span>converts the floating point number <span 
class="cmtt-10">value </span>to a string representation, according
to the settings of the parameters <span 
class="cmtt-10">Format</span>, <span 
class="cmtt-10">Precision </span>and <span 
class="cmtt-10">Digits</span>.
<!--l. 2222--><p class="noindent">The meaning of the <span 
class="cmtt-10">Precision </span>and <span 
class="cmtt-10">Digits </span>parameter depends on the <span 
class="cmtt-10">Format </span>parameter. The
format is controlled mainly by the <span 
class="cmtt-10">Format </span>parameter. It can have one of the following
values:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">ffcurrency</span></dt><dd 
class="description">Money  format.  <span 
class="cmtt-10">Value  </span>is  converted  to  a  string  using  the  global  variables
    <span 
class="cmtt-10">CurrencyString</span>, <span 
class="cmtt-10">CurrencyFormat </span>and <span 
class="cmtt-10">NegCurrencyFormat</span>. The <span 
class="cmtt-10">Digits </span>paramater
    specifies the number of digits following the decimal point and should be in the range -1
    to 18. If Digits equals <span 
class="cmtt-10">-1</span>, <span 
class="cmtt-10">CurrencyDecimals </span>is assumed. The <span 
class="cmtt-10">Precision </span>parameter is
    ignored.
    </dd><dt class="description">
<span 
class="cmbx-10">ffExponent</span></dt><dd 
class="description">Scientific format. <span 
class="cmtt-10">Value </span>is converted to a string using scientific notation: 1 digit
                                                                            

                                                                            
    before the decimal point, possibly preceded by a minus sign if <span 
class="cmtt-10">Value </span>is negative. The
    number of digits after the decimal point is controlled by <span 
class="cmtt-10">Precision </span>and must lie in the
    range 0 to 15.
    </dd><dt class="description">
<span 
class="cmbx-10">ffFixed</span></dt><dd 
class="description">Fixed point format. <span 
class="cmtt-10">Value </span>is converted to a string using fixed point notation. The
    result is composed of all digits of the integer part of <span 
class="cmtt-10">Value</span>, preceded by a minus sign
    if  <span 
class="cmtt-10">Value </span>is negative. Following the integer part is <span 
class="cmtt-10">DecimalSeparator </span>and then the
    fractional part of <span 
class="cmtt-10">Value</span>, rounded off to <span 
class="cmtt-10">Digits </span>numbers. If the number is too large
    then the result will be in scientific notation.
    </dd><dt class="description">
<span 
class="cmbx-10">ffGeneral</span></dt><dd 
class="description">General number format. The argument is converted to a string using <span 
class="cmtt-10">ffExponent</span>
    or <span 
class="cmtt-10">ffFixed </span>format, depending on wich one gives the shortest string. There will be no
    trailing zeroes. If <span 
class="cmtt-10">Value </span>is less than <span 
class="cmtt-10">0.00001 </span>or if the number of decimals left of the
    decimal point is larger than <span 
class="cmtt-10">Precision </span>then scientific notation is used, and <span 
class="cmtt-10">Digits </span>is
    the minimum number of digits in the exponent. Otherwise <span 
class="cmtt-10">Digits </span>is ignored.
    </dd><dt class="description">
<span 
class="cmbx-10">ffnumber</span></dt><dd 
class="description">Is the same as <span 
class="cmtt-10">ffFixed</span>, except that thousand separators are inserted in the resultig
    string.</dd></dl>
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">FloatToStr </span>(<a 
href="#x106-91500022.8">779<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FloatToText </span>(<a 
href="#x106-91700022.8">782<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2261--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex68.pp</span><HR/><div class="listinginput">
<!--l. 2261--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example68;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FloatToStrF</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>&nbsp;<span 
class="cmtt-10">Fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array</span>&nbsp;<span 
class="cmtt-10">[TFloatFormat]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">string[10]</span>&nbsp;<span 
class="cmtt-10">=</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">('general','exponent','fixed','number','Currency');</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(Value</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;&nbsp;<span 
class="cmtt-10">Extended);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">I,J</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">FF</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">TFloatFormat;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=5</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">15</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">J:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">4</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">FF:=ffgeneral</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">ffcurrency</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">(Value,'(Prec:</span>&nbsp;<span 
class="cmtt-10">',I:2,',</span>&nbsp;<span 
class="cmtt-10">Dig:</span>&nbsp;<span 
class="cmtt-10">',J,',</span>&nbsp;<span 
class="cmtt-10">fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',Fmt[ff],')</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(FloatToStrf(Value,FF,I,J));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">(-Value,'(Prec:</span>&nbsp;<span 
class="cmtt-10">',I:2,',</span>&nbsp;<span 
class="cmtt-10">Dig:</span>&nbsp;<span 
class="cmtt-10">',J,',</span>&nbsp;<span 
class="cmtt-10">fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',Fmt[ff],')</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(FloatToStrf(-Value,FF,I,J));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">end;</span>
                                                                            

                                                                            
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E5);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-5);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E10);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-10);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E15);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-15);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E100);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-100);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-923" name="x106-91700022.8">FloatToText</a></h4><a 
  name="dx106-917001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function FloatToText(Buffer : Pchar;Value: Extended; Format: TFloatFormat;</span>
<span 
class="cmtt-10">Precision, Digits: Integer): Longint;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">FloatToText </span>converts the floating point variable <span 
class="cmtt-10">Value </span>to a string representation and
stores it in <span 
class="cmtt-10">Buffer</span>. The conversion is giverned by <span 
class="cmtt-10">format</span>, <span 
class="cmtt-10">Precisison </span>and <span 
class="cmtt-10">Digits</span>. more
information on these parameters can be found in <span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>). <span 
class="cmtt-10">Buffer </span>should point to
enough space to hold the result. No checking on this is performed.
<!--l. 2275--><p class="noindent">The result is the number of characters that was copied in <span 
class="cmtt-10">Buffer</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">FloatToStr </span>(<a 
href="#x106-91500022.8">779<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2282--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex69.pp</span><HR/><div class="listinginput">
<!--l. 2282--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example68;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FloatToStrF</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>&nbsp;<span 
class="cmtt-10">Fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array</span>&nbsp;<span 
class="cmtt-10">[TFloatFormat]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">string[10]</span>&nbsp;<span 
class="cmtt-10">=</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">('general','exponent','fixed','number','Currency');</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(Value</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;&nbsp;<span 
class="cmtt-10">Extended);</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">I,J</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">FF</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">TFloatFormat;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">ShortString;</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=5</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">15</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">J:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">4</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">FF:=ffgeneral</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">ffcurrency</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">(Value,'(Prec:</span>&nbsp;<span 
class="cmtt-10">',I:2,',</span>&nbsp;<span 
class="cmtt-10">Dig:</span>&nbsp;<span 
class="cmtt-10">',J,',</span>&nbsp;<span 
class="cmtt-10">fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',Fmt[ff],')</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">SetLength(S,FloatToText</span>&nbsp;<span 
class="cmtt-10">(@S[1],Value,FF,I,J));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">(-Value,'(Prec:</span>&nbsp;<span 
class="cmtt-10">',I:2,',</span>&nbsp;<span 
class="cmtt-10">Dig:</span>&nbsp;<span 
class="cmtt-10">',J,',</span>&nbsp;<span 
class="cmtt-10">fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',Fmt[ff],')</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">SetLength(S,FloatToText</span>&nbsp;<span 
class="cmtt-10">(@S[1],-Value,FF,I,J));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-1);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E5);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-5);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E10);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-10);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E15);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-15);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E100);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(1.1E-100);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-924" name="x106-91800022.8">FmtStr</a></h4><a 
  name="dx106-918001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Procedure (Var Res: String; Const Fmt : String; Const args: Array of</span>
<span 
class="cmtt-10">const);</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">FmtStr </span>calls <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>) with <span 
class="cmtt-10">Fmt </span>and <span 
class="cmtt-10">Args </span>as arguments, and stores the result in <span 
class="cmtt-10">Res</span>.
For more information on how the resulting string is composed, see <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>).
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">In case of error, a <span 
class="cmtt-10">EConvertError </span>exception is raised.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FormatBuf </span>(<a 
href="#x106-92000022.8">793<!--tex4ht:ref: se:TBufStream--></a>).</dd></dl>
<!--l. 2298--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex70.pp</span><HR/><div class="listinginput">
<!--l. 2298--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example70;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FmtStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
                                                                            

                                                                            
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">FmtStr</span>&nbsp;<span 
class="cmtt-10">(S,'For</span>&nbsp;<span 
class="cmtt-10">some</span>&nbsp;<span 
class="cmtt-10">nice</span>&nbsp;<span 
class="cmtt-10">examples</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">fomatting</span>&nbsp;<span 
class="cmtt-10">see</span>&nbsp;<span 
class="cmtt-10">%s.',['Format']);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-925" name="x106-91900022.8">Format</a></h4><a 
  name="dx106-919001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function Format(Const Fmt : String; const Args : Array of const) : String;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list">Format replaces all placeholders in<span 
class="cmtt-10">Fmt </span>with the arguments passed in <span 
class="cmtt-10">Args </span>and returns the
resulting string. A placeholder looks as follows:
                                                                            

                                                                            
<table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
&nbsp;'%'&nbsp;[Index':']&nbsp;['-']&nbsp;[Width]&nbsp;['.'&nbsp;Precision]&nbsp;ArgType
</pre>
</td></tr></table>elements between single quotes must be typed as shown without the quotes, and elements
between square brackets <span 
class="cmtt-10">[ ] </span>are optional. The meaning of the different elements is shown
below:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">&#8217;%&#8217;</span></dt><dd 
class="description">starts the placeholder. If you want to insert a literal <span 
class="cmtt-10">% </span>character, then you must insert
    two of them : <span 
class="cmtt-10">%%</span>.
    </dd><dt class="description">
<span 
class="cmbx-10">Index &#8217;:&#8217;</span></dt><dd 
class="description">takes the <span 
class="cmtt-10">Index</span>-th element in the argument array as the element to insert.
    </dd><dt class="description">
<span 
class="cmbx-10">&#8217;-&#8217;</span></dt><dd 
class="description">tells <span 
class="cmtt-10">Format </span>to left-align the inserted text. The default behaviour is to right-align inserted
    text. This can only take effect if the <span 
class="cmtt-10">Width </span>element is also specified.
    </dd><dt class="description">
<span 
class="cmbx-10">Width</span></dt><dd 
class="description">the inserted string must have at least have <span 
class="cmtt-10">Width </span>characters. If not, the inserted
    string will be padded with spaces. By default, the string is left-padded, resulting in a
    right-aligned string. This behaviour can be changed by the <span 
class="cmtt-10">'-' </span>character.
    </dd><dt class="description">
<span 
class="cmbx-10">&#8217;.&#8217; Precision</span></dt><dd 
class="description">Indicates the precision to be used when converting the argument. The exact
    meaning of this parameter depends on <span 
class="cmtt-10">ArgType</span>.</dd></dl>
<!--l. 2328--><p class="noindent">The <span 
class="cmtt-10">Index</span>, <span 
class="cmtt-10">Width </span>and <span 
class="cmtt-10">Precision </span>parameters can be replaced by <span 
class="cmtt-10">*</span>, in which case their value will
be read from the next element in the <span 
class="cmtt-10">Args </span>array. This value must be an integer, or an
<span 
class="cmtt-10">EConvertError </span>exception will be raised.
<!--l. 2333--><p class="noindent">The argument type is determined from <span 
class="cmtt-10">ArgType</span>. It can have one of the following values (case
insensitive):
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">D</span></dt><dd 
class="description">Decimal format. The next argument in the <span 
class="cmtt-10">Args </span>array should be an integer. The argument
    is converted to a decimal string,. If precision is specified, then the string will have at
    least <span 
class="cmtt-10">Precision </span>digits in it. If needed, the string is (left) padded with zeroes.
    </dd><dt class="description">
<span 
class="cmbx-10">E</span></dt><dd 
class="description">scientific format. The next argument in the <span 
class="cmtt-10">Args </span>array should be a Floating point value. The
    argument is converted to a decimal string using scientific notation, using <span 
class="cmss-10">FloatToStrF</span>
    (<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>), where the optional precision is used to specify the total number of decimals.
    (defalt a valueof 15 is used). The exponent is formatted using maximally 3 digits.
    <!--l. 2346--><p class="noindent">In short, the <span 
class="cmtt-10">E </span>specifier formats it&#8217;s arguument as follows:
                                                                            

                                                                            
    <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
    &nbsp;FloatToStrF(Argument,ffexponent,Precision,3)
</pre>
    </td></tr></table>
    </dd><dt class="description">
<span 
class="cmbx-10">F</span></dt><dd 
class="description">fixed point format. The next argument in the <span 
class="cmtt-10">Args </span>array should be a floating point
    value. The argument is converted to a decimal string, using fixed notation (see
    <span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>)). <span 
class="cmtt-10">Precision </span>indicates the number of digits following the decimal
    point.
    <!--l. 2357--><p class="noindent">In short, the <span 
class="cmtt-10">F </span>specifier formats it&#8217;s arguument as follows:
                                                                            

                                                                            
    <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
    &nbsp;FloatToStrF(Argument,ffFixed,ffixed,9999,Precision)
</pre>
    </td></tr></table>
    </dd><dt class="description">
<span 
class="cmbx-10">G</span></dt><dd 
class="description">General number format. The next argument in the <span 
class="cmtt-10">Args </span>array should be a floating point value.
    The argument is converted to a decimal string using fixed point notation or scientific notation,
    depending on which gives the shortest result. <span 
class="cmtt-10">Precision </span>is used to determine the number of
    digits after the decimal point.
    <!--l. 2368--><p class="noindent">In short, the <span 
class="cmtt-10">G </span>specifier formats it&#8217;s arguument as follows:
                                                                            

                                                                            
    <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
    &nbsp;FloatToStrF(Argument,ffGeneral,Precision,3)
</pre>
    </td></tr></table>
    </dd><dt class="description">
<span 
class="cmbx-10">M</span></dt><dd 
class="description">Currency format. the next argument in the varArgs array must be a floating point value. The
    argument is converted to a decimal string using currency notation. This means that
    fixed-point notation is used, but that the currency symbol is appended. If precision is
    specified, then then it overrides the <span 
class="cmtt-10">CurrencyDecimals </span>global variable used in the <span 
class="cmss-10">FloatToStrF</span>
    (<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>)
    <!--l. 2380--><p class="noindent">In short, the <span 
class="cmtt-10">M </span>specifier formats it&#8217;s arguument as follows:
                                                                            

                                                                            
    <table width="100%" 
class="verbatim"><tr class="verbatim"><td 
class="verbatim"><pre class="verbatim">
    &nbsp;FloatToStrF(Argument,ffCurrency,9999,Precision)
</pre>
    </td></tr></table>
    </dd><dt class="description">
<span 
class="cmbx-10">N</span></dt><dd 
class="description">Number format. This is the same as fixed point format, except that thousand separators are
    inserted in the resulting string.
    </dd><dt class="description">
<span 
class="cmbx-10">P</span></dt><dd 
class="description">Pointer format. The next argument in the <span 
class="cmtt-10">Args </span>array must be a pointer (typed or untyped). The
    pointer value is converted to a string of length 8, representing the hexadecimal value of the
    pointer.
    </dd><dt class="description">
<span 
class="cmbx-10">S</span></dt><dd 
class="description">String format. The next argument in the <span 
class="cmtt-10">Args </span>array must be a string. The argument is simply
    copied to the result string. If <span 
class="cmtt-10">Precision </span>is specified, then only <span 
class="cmtt-10">Precision </span>characters are
    copied to the result string.
    </dd><dt class="description">
<span 
class="cmbx-10">X</span></dt><dd 
class="description">hexadecimal format. The next argument in the <span 
class="cmtt-10">Args </span>array must be an integer. The
    argument is converted to a hexadecimal string with just enough characters to contain
    the value of the integer. If <span 
class="cmtt-10">Precision </span>is specified then the resulting hexadecimal
    representation will have at least <span 
class="cmtt-10">Precision </span>characters in it (with a maximum value of
    32).</dd></dl>
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">In case of error, an <span 
class="cmtt-10">EConversionError </span>exception is raised. Possible errors are:
    <ol type="1" class="enumerate1" 
>
    <li class="enumerate"><a 
  name="x106-919003x1"></a>Errors in the format specifiers.
    </li>
    <li class="enumerate"><a 
  name="x106-919005x2"></a>The next argument is not of the type needed by a specifier.
    </li>
    <li class="enumerate"><a 
  name="x106-919007x3"></a>The number of arguments is not sufficient for all format specifiers.</li></ol>
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">FormatBuf </span>(<a 
href="#x106-92000022.8">793<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2415--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex71.pp</span><HR/><div class="listinginput">
<!--l. 2415--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">example71;</span>
<br>
<br>   <span 
class="cmtt-10">{$mode</span>&nbsp;<span 
class="cmtt-10">objfpc}</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">Format</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">P</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Pointer;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt,S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">string;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestInteger;</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%%]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%.4d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*d]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestHexaDecimal;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*x]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,10]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestPointer;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">P:=Pointer(1234567);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%10p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%10.4p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%0:p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%0:10p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%0:10.4p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%0:-10p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[0x%0:-10.4p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*p]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,P]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestString;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%s]';S:=Format(fmt,['This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%0:s]';s:=Format(fmt,['This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%0:18s]';s:=Format(fmt,['This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%0:-18s]';s:=Format(fmt,['This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%0:18.12s]';s:=Format(fmt,['This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">fmt:='[%-*.*s]';s:=Format(fmt,[18,12,'This</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">a</span>&nbsp;<span 
class="cmtt-10">string']);Writeln(fmt:12,'=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestExponential;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestNegativeExponential;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,-1.234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestSmallExponential;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[0.0123]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">TestSmallNegExponential;</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(Fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%0:-10.4e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Fmt:='[%-*.*e]';S:=Format</span>&nbsp;<span 
class="cmtt-10">(fmt,[4,5,-0.01234]);writeln(Fmt:12,'</span>&nbsp;<span 
class="cmtt-10">=&gt;</span>&nbsp;<span 
class="cmtt-10">',s);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Exception</span>&nbsp;<span 
class="cmtt-10">caught</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">writeln</span>&nbsp;<span 
class="cmtt-10">('Press</span>&nbsp;<span 
class="cmtt-10">enter');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">readln;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestInteger;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestHexadecimal;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestPointer;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestExponential;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestNegativeExponential;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestSmallExponential;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestSmallNegExponential;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">teststring;</span>
<br>   <span 
class="cmtt-10">end.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-926" name="x106-92000022.8">FormatBuf</a></h4><a 
  name="dx106-920001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function FormatBuf(Var Buffer; BufLen : Cardinal; Const Fmt; fmtLen :</span>
<span 
class="cmtt-10">Cardinal; Const Args : Array of const) : Cardinal;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Format</span>
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<!--l. 2427--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex72.pp</span><HR/><div class="listinginput">
<!--l. 2427--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example72;</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FormatBuf</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">ShortString;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Fmt</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">ShortString</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;&nbsp;<span 
class="cmtt-10">'For</span>&nbsp;<span 
class="cmtt-10">some</span>&nbsp;<span 
class="cmtt-10">nice</span>&nbsp;<span 
class="cmtt-10">examples</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">fomatting</span>&nbsp;<span 
class="cmtt-10">see</span>&nbsp;<span 
class="cmtt-10">%s.';</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">SetLength(S,FormatBuf</span>&nbsp;<span 
class="cmtt-10">(S[1],255,Fmt[1],Length(Fmt),['Format']));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-927" name="x106-92100022.8">FormatFloat</a></h4><a 
  name="dx106-921001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function FormatFloat(Const format: String; Value: Extended): String;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list">FormatFloat formats the floating-point value given by <span 
class="cmtt-10">Value </span>using the format specifications
in <span 
class="cmtt-10">Format</span>. The format specifier can give format specifications for positive, negative or zero
values (separated by a semicolon).
<!--l. 2439--><p class="noindent">If  the  formatspecifier  is  empty  or  the  value  needs  more  than  18  digits  to  be  correctly
represented, the result is formatted with a call to <span 
class="cmss-10">FloatToStrF </span>(<a 
href="#x106-91600022.8">780<!--tex4ht:ref: se:TBufStream--></a>) with the <span 
class="cmtt-10">ffGeneral</span>
format option.
<!--l. 2443--><p class="noindent">The following format specifiers are supported:
    <dl class="description"><dt class="description">
<span 
class="cmbx-10">0</span></dt><dd 
class="description">is a digit place holder. If there is a corresponding digit in the value being formatted, then
    it replaces the 0. If not, the 0 is left as-is.
    </dd><dt class="description">
<span 
class="cmbx-10">#</span></dt><dd 
class="description">is also a digit place holder. If there is a corresponding digit in the value being formatted,
    then it replaces the #. If not, it is removed. by a space.
    </dd><dt class="description">
<span 
class="cmbx-10">.</span></dt><dd 
class="description">determines the location of the decimal point. Only the first &#8217;.&#8217; character is taken into account.
    If the value contains digits after the decimal point, then it is replaced by the value of
    the <span 
class="cmtt-10">DecimalSeparator </span>character.
    </dd><dt class="description">
<span 
class="cmbx-10">,</span></dt><dd 
class="description">determines the use of the thousand separator character in the output string. If the format
    string contains one or more &#8217;,&#8217; charactes, then thousand separators will be used. The
    <span 
class="cmtt-10">ThousandSeparator </span>character is used.
    </dd><dt class="description">
<span 
class="cmbx-10">E+</span></dt><dd 
class="description">determines the use of scientific notation. If &#8217;E+&#8217; or &#8217;E-&#8217; (or their lowercase counterparts)
    are present then scientific notation is used. The number of digits in the output string
    is determined by the number of <span 
class="cmtt-10">0 </span>characters after the &#8217;<span 
class="cmtt-10">E+</span>&#8217;
    </dd><dt class="description">
<span 
class="cmbx-10">;</span></dt><dd 
class="description">This character separates sections for positive, negative, and zero numbers in the format
    string.</dd></dl>
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">If an error occurs, an exception is raised.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">FloatToStr </span>(<a 
href="#x106-91500022.8">779<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2472--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex89.pp</span><HR/><div class="listinginput">
<!--l. 2472--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example89;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">FormatFloat</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">NrFormat=9;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">FormatStrings</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array[1..NrFormat]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">string</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">(</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'0',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'0.00',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'#.##',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'#,##0.00',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'#,##0.00;(#,##0.00)',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'#,##0.00;;Zero',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'0.000E+00',</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">'#.###E-0');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">NrValue</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">5;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">FormatValues</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array[1..NrValue]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">Double</span>&nbsp;<span 
class="cmtt-10">=</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">(1234,-1234,0.5,0,-0.5);</span>
<br>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Width</span>&nbsp;&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">12;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">FWidth</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">20;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">I,J</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Integer;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write('Format':FWidth);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">NrValue</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write(FormatValues[i]:Width:2);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">NrFormat</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write(FormatStrings[i]:FWidth);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">J:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">NrValue</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">S:=FormatFloat(FormatStrings[I],FormatValues[j]);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write(S:Width);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">End.</span>
                                                                            

                                                                            
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-928" name="x106-92200022.8">IntToHex</a></h4><a 
  name="dx106-922001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function IntToHex(Value: integer; Digits: integer): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">IntToHex </span>converts <span 
class="cmtt-10">Value </span>to a hexadecimal string representation. The result will contain at
least <span 
class="cmtt-10">Digits </span>characters. If <span 
class="cmtt-10">Digits </span>is less than the needed number of characters, the string
will NOT be truncated. If <span 
class="cmtt-10">Digits </span>is larger than the needed number of characters, the result
is padded with zeroes.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">IntToStr </span>(<a 
href="#x106-92300022.8">796<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmtt-10">StrToInt</span></dd></dl>
<!--l. 2489--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex73.pp</span><HR/><div class="listinginput">
<!--l. 2489--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example73;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">IntToHex</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">I</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=0</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">31</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(IntToHex(1</span>&nbsp;<span 
class="cmtt-10">shl</span>&nbsp;<span 
class="cmtt-10">I,8));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(IntToHex(15</span>&nbsp;<span 
class="cmtt-10">shl</span>&nbsp;<span 
class="cmtt-10">I,8))</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-929" name="x106-92300022.8">IntToStr</a></h4><a 
  name="dx106-923001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function IntToStr(Value: integer): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">IntToStr </span>coverts <span 
class="cmtt-10">Value </span>to it&#8217;s string representation. The resulting string has only as much
characters as needed to represent the value. If the value is negative a minus sign is prepended
to the string.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">IntToHex </span>(<a 
href="#x106-92200022.8">796<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">StrToInt </span>(<a 
href="#x106-93500022.8">804<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
                                                                            

                                                                            
<!--l. 2506--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex74.pp</span><HR/><div class="listinginput">
<!--l. 2506--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example74;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">IntToStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">I</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">longint;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=0</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">31</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(IntToStr(1</span>&nbsp;<span 
class="cmtt-10">shl</span>&nbsp;<span 
class="cmtt-10">I));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(IntToStr(15</span>&nbsp;<span 
class="cmtt-10">shl</span>&nbsp;<span 
class="cmtt-10">I));</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-930" name="x106-92400022.8">IsValidIdent</a></h4><a 
  name="dx106-924001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function IsValidIdent(const Ident: string): boolean;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">IsValidIdent </span>returns <span 
class="cmtt-10">True </span>if <span 
class="cmtt-10">Ident </span>can be used as a compoent name. It returns <span 
class="cmtt-10">False</span>
otherwise. <span 
class="cmtt-10">Ident </span>must consist of a letter or underscore, followed by a combination of letters,
numbers or underscores to be a valid identifier.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<!--l. 2522--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex75.pp</span><HR/><div class="listinginput">
<!--l. 2522--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example75;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">IsValidIdent</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Write</span>&nbsp;<span 
class="cmtt-10">('&#34;',S,'&#34;</span>&nbsp;<span 
class="cmtt-10">is</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">not</span>&nbsp;<span 
class="cmtt-10">IsVAlidIdent(S)</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Write('NOT</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('a</span>&nbsp;<span 
class="cmtt-10">valid</span>&nbsp;<span 
class="cmtt-10">identifier');</span>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('_MyObj');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('My__Obj1');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('My_1_Obj');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('1MyObject');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('My@Object');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('M123');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-931" name="x106-92500022.8">LastDelimiter</a></h4><a 
  name="dx106-925001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function LastDelimiter(const Delimiters, S: string): Integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">LastDelimiter </span>returns the <span 
class="cmti-10">last </span>occurrence of any character in the set <span 
class="cmtt-10">Delimiters </span>in the
string <span 
class="cmtt-10">S</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<!--l. 2535--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex88.pp</span><HR/><div class="listinginput">
<!--l. 2535--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">example88;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">LastDelimiter</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">uses</span>&nbsp;<span 
class="cmtt-10">SysUtils;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln(LastDelimiter('\.:','c:\filename.ext'));</span>
<br>   <span 
class="cmtt-10">end.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-932" name="x106-92600022.8">LeftStr</a></h4><a 
  name="dx106-926001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function LeftStr(const S: string; Count: integer): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">LeftStr </span>returns the <span 
class="cmtt-10">Count </span>leftmost characters of  <span 
class="cmtt-10">S</span>. It is equivalent to a call to
<span 
class="cmtt-10">Copy(S,1,Count)</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">RightStr </span>(<a 
href="#x106-93100022.8">801<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimLeft </span>(<a 
href="#x106-93900022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimRight </span>(<a 
href="#x106-94000022.8">808<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">Trim </span>(<a 
href="#x106-93800022.8">807<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2550--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex76.pp</span><HR/><div class="listinginput">
<!--l. 2550--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example76;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">LeftStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(LeftStr('abcdefghijklmnopqrstuvwxyz',20));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(LeftStr('abcdefghijklmnopqrstuvwxyz',15));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(LeftStr('abcdefghijklmnopqrstuvwxyz',1));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(LeftStr('abcdefghijklmnopqrstuvwxyz',200));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-933" name="x106-92700022.8">LoadStr</a></h4><a 
  name="dx106-927001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function LoadStr(Ident: integer): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list">This function is not yet implemented. resources are not yet supported.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-934" name="x106-92800022.8">LowerCase</a></h4><a 
  name="dx106-928001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function LowerCase(const s: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">LowerCase </span>returns the lowercase equivalent of <span 
class="cmtt-10">S</span>. Ansi characters are not taken into account,
only ASCII codes below 127 are converted. It is completely equivalent to the lowercase
function of the system unit, and is provided for compatiibility only.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">UpperCase </span>(<a 
href="#x106-94100022.8">809<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiUpperCase </span>(<a 
href="#x106-90700022.8">773<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2576--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex77.pp</span><HR/><div class="listinginput">
                                                                            

                                                                            
<!--l. 2576--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example77;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">LowerCase</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(LowerCase('THIS</span>&nbsp;<span 
class="cmtt-10">WILL</span>&nbsp;<span 
class="cmtt-10">COME</span>&nbsp;<span 
class="cmtt-10">out</span>&nbsp;<span 
class="cmtt-10">all</span>&nbsp;<span 
class="cmtt-10">LoWeRcAsE</span>&nbsp;<span 
class="cmtt-10">!'));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-935" name="x106-92900022.8">NewStr</a></h4><a 
  name="dx106-929001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function NewStr(const S: string): PString;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">NewStr </span>assigns a new dynamic string on the heap, copies <span 
class="cmtt-10">S </span>into it, and returns a pointer to
the newly assigned string.
<!--l. 2586--><p class="noindent">This function is obsolete, and shouldn&#8217;t be used any more. The <span 
class="cmtt-10">AnsiString </span>mechanism also
allocates ansistrings on the heap, and should be preferred over this mechanism.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">If not enough memory is present, an EOutOfMemory exception will be raised.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AssignStr </span>(<a 
href="#x106-90900022.8">775<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">DisposeStr </span>(<a 
href="#x106-91400022.8">779<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2595--><p class="noindent">For an example, see <span 
class="cmss-10">AssignStr </span>(<a 
href="#x106-90900022.8">775<!--tex4ht:ref: se:TBufStream--></a>).
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-936" name="x106-93000022.8">QuotedStr</a></h4><a 
  name="dx106-930001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function QuotedStr(const S: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">QuotedStr </span>returns the string <span 
class="cmtt-10">S</span>, quoted with single quotes. This means that <span 
class="cmtt-10">S </span>is enclosed
in  single  quotes,  and  every  single  quote  in  <span 
class="cmtt-10">S </span>is  doubled.  It  is  equivalent  to  a  call  to
<span 
class="cmtt-10">AnsiQuotedStr(s, '''')</span>.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiQuotedStr </span>(<a 
href="#x106-89900022.8">767<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiExtractQuotedStr </span>(<a 
href="#x106-89600022.8">765<!--tex4ht:ref: se:TBufStream--></a>).</dd></dl>
<!--l. 2610--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex78.pp</span><HR/><div class="listinginput">
<!--l. 2610--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example78;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">QuotedStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">S:='He</span>&nbsp;<span 
class="cmtt-10">said</span>&nbsp;<span 
class="cmtt-10">''Hello''</span>&nbsp;<span 
class="cmtt-10">and</span>&nbsp;<span 
class="cmtt-10">walked</span>&nbsp;<span 
class="cmtt-10">on';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(S);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;<span 
class="cmtt-10">becomes');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(QuotedStr(S));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-937" name="x106-93100022.8">RightStr</a></h4><a 
  name="dx106-931001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function RightStr(const S: string; Count: integer): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">RightStr </span>returns the <span 
class="cmtt-10">Count </span>rightmost characters of  <span 
class="cmtt-10">S</span>. It is equivalent to a call to
<span 
class="cmtt-10">Copy(S,Length(S)+1-Count,Count)</span>.
<!--l. 2621--><p class="noindent">If <span 
class="cmtt-10">Count </span>is larger than the actual length of <span 
class="cmtt-10">S </span>only the real length will be used.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">LeftStr </span>(<a 
href="#x106-92600022.8">798<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">Trim </span>(<a 
href="#x106-93800022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimLeft </span>(<a 
href="#x106-93900022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimRight </span>(<a 
href="#x106-94000022.8">808<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2629--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex79.pp</span><HR/><div class="listinginput">
<!--l. 2629--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example79;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">RightStr</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(RightStr('abcdefghijklmnopqrstuvwxyz',20));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(RightStr('abcdefghijklmnopqrstuvwxyz',15));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(RightStr('abcdefghijklmnopqrstuvwxyz',1));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(RightStr('abcdefghijklmnopqrstuvwxyz',200));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-938" name="x106-93200022.8">StrFmt</a></h4><a 
  name="dx106-932001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function StrFmt(Buffer,Fmt : PChar; Const args: Array of const) : Pchar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">StrFmt </span>will format <span 
class="cmtt-10">fmt </span>with <span 
class="cmtt-10">Args</span>, as the <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>) function does, and it will store
                                                                            

                                                                            
the result in <span 
class="cmtt-10">Buffer</span>. The function returns <span 
class="cmtt-10">Buffer</span>. <span 
class="cmtt-10">Buffer </span>should point to enough space to
contain the whole result.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">for a list of errors, see <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>).
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">StrLFmt </span>(<a 
href="#x106-93300022.8">802<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FmtStr </span>(<a 
href="#x106-91800022.8">783<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FormatBuf </span>(<a 
href="#x106-92000022.8">793<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2646--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex80.pp</span><HR/><div class="listinginput">
<!--l. 2646--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example80;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">StrFmt</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">SetLEngth(S,80);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrFmt</span>&nbsp;<span 
class="cmtt-10">(@S[1],'For</span>&nbsp;<span 
class="cmtt-10">some</span>&nbsp;<span 
class="cmtt-10">nice</span>&nbsp;<span 
class="cmtt-10">examples</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">fomatting</span>&nbsp;<span 
class="cmtt-10">see</span>&nbsp;<span 
class="cmtt-10">%s.',['Format']));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-939" name="x106-93300022.8">StrLFmt</a></h4><a 
  name="dx106-933001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function StrLFmt(Buffer : PCHar; Maxlen : Cardinal;Fmt : PChar; Const args:</span>
<span 
class="cmtt-10">Array of const) : Pchar;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">StrLFmt </span>will format <span 
class="cmtt-10">fmt </span>with <span 
class="cmtt-10">Args</span>, as the <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>) function does, and it will store
maximally <span 
class="cmtt-10">Maxlen characters </span>of the result in <span 
class="cmtt-10">Buffer</span>. The function returns <span 
class="cmtt-10">Buffer</span>. <span 
class="cmtt-10">Buffer</span>
should point to enough space to contain <span 
class="cmtt-10">MaxLen </span>characters.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">for a list of errors, see <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>).
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">StrFmt </span>(<a 
href="#x106-93200022.8">801<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FmtStr </span>(<a 
href="#x106-91800022.8">783<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">Format </span>(<a 
href="#x106-91900022.8">784<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FormatBuf </span>(<a 
href="#x106-92000022.8">793<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2663--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex81.pp</span><HR/><div class="listinginput">
<!--l. 2663--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example80;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">StrFmt</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>&nbsp;<span 
class="cmtt-10">S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">AnsiString;</span>
                                                                            

                                                                            
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">SetLEngth(S,80);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrLFmt</span>&nbsp;<span 
class="cmtt-10">(@S[1],80,'For</span>&nbsp;<span 
class="cmtt-10">some</span>&nbsp;<span 
class="cmtt-10">nice</span>&nbsp;<span 
class="cmtt-10">examples</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">fomatting</span>&nbsp;<span 
class="cmtt-10">see</span>&nbsp;<span 
class="cmtt-10">%s.',['Format']));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-940" name="x106-93400022.8">StrToFloat</a></h4><a 
  name="dx106-934001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function StrToFloat(Const S : String) : Extended;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">StrToFloat </span>converts the string <span 
class="cmtt-10">S </span>to a floating point value. <span 
class="cmtt-10">S </span>should contain a valid stroing
representation of a floating point value (either in decimal or scientific notation). If the string
contains a decimal value, then the decimal separator character can either be a &#8217;.&#8217; or the value
of the <span 
class="cmtt-10">DecimalSeparator </span>variable.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">If the string <span 
class="cmtt-10">S </span>doesn&#8217;t contain a valid floating point string, then an exception will be raised.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">TextToFloat </span>(<a 
href="#x106-93700022.8">805<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">FloatToStr </span>(<a 
href="#x106-91500022.8">779<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">FormatFloat </span>(<a 
href="#x106-92100022.8">794<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">StrToInt </span>(<a 
href="#x106-93500022.8">804<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2681--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex90.pp</span><HR/><div class="listinginput">
<!--l. 2681--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example90;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">StrToFloat</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$mode</span>&nbsp;<span 
class="cmtt-10">objfpc}</span>
<br>   <span 
class="cmtt-10">{$h+</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">SysUtils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">NrValues</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">5;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestStr</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array[1..NrValues]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">string</span>&nbsp;<span 
class="cmtt-10">=</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">('1,1','-0,2','1,2E-4','0','1E4');</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">I</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Integer;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Extended;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Using</span>&nbsp;<span 
class="cmtt-10">DecimalSeparator</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',DecimalSeparator);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">NrValues</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Converting</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',TestStr[i]);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">E:=StrToFloat(TestStr[i]);</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Converted</span>&nbsp;<span 
class="cmtt-10">value</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Exception</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Exception</span>&nbsp;<span 
class="cmtt-10">when</span>&nbsp;<span 
class="cmtt-10">converting</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E.Message);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">DecimalSeparator:=',';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">DecimalSeparator:='.';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-941" name="x106-93500022.8">StrToInt</a></h4><a 
  name="dx106-935001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function StrToInt(const s: string): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">StrToInt </span>will convert the string <span 
class="cmtt-10">S</span>to an integer. If the string contains invalid characters or
has an invalid format, then an <span 
class="cmtt-10">EConvertError </span>is raised.
<!--l. 2692--><p class="noindent">To be successfully converted, a string can contain a combination of <span 
class="cmtt-10">numerical </span>characters,
possibly preceded by a minus sign (<span 
class="cmtt-10">-</span>). Spaces are not allowed.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">In case of error, an <span 
class="cmtt-10">EConvertError </span>is raised.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">IntToStr </span>(<a 
href="#x106-92300022.8">796<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">StrToIntDef </span>(<a 
href="#x106-93600022.8">805<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2701--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex82.pp</span><HR/><div class="listinginput">
<!--l. 2701--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example82;</span>
<br>
<br>   <span 
class="cmtt-10">{$mode</span>&nbsp;<span 
class="cmtt-10">objfpc}</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">StrToInt</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToInt('1234'));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToInt('-1234'));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToInt('0'));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToInt('12345678901234567890'));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">EConvertError</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Invalid</span>&nbsp;<span 
class="cmtt-10">number</span>&nbsp;<span 
class="cmtt-10">encountered');</span>
                                                                            

                                                                            
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-942" name="x106-93600022.8">StrToIntDef</a></h4><a 
  name="dx106-936001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function StrToIntDef(const S: string; Default: integer): integer;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">StrToIntDef </span>will convert a string to an integer. If the string contains invalid characters or
has an invalid format, then <span 
class="cmtt-10">Default </span>is returned.
<!--l. 2711--><p class="noindent">To be successfully converted, a string can contain a combination of <span 
class="cmtt-10">numerical </span>characters,
possibly preceded by a minus sign (<span 
class="cmtt-10">-</span>). Spaces are not allowed.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">IntToStr </span>(<a 
href="#x106-92300022.8">796<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">StrToInt </span>(<a 
href="#x106-93500022.8">804<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2720--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex83.pp</span><HR/><div class="listinginput">
<!--l. 2720--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example82;</span>
<br>
<br>   <span 
class="cmtt-10">{$mode</span>&nbsp;<span 
class="cmtt-10">objfpc}</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">StrToInt</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToIntDef('1234',0));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToIntDef('-1234',0));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToIntDef('0',0));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Try</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(StrToIntDef('12345678901234567890',0));</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">except</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">On</span>&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">EConvertError</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('Invalid</span>&nbsp;<span 
class="cmtt-10">number</span>&nbsp;<span 
class="cmtt-10">encountered');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-943" name="x106-93700022.8">TextToFloat</a></h4><a 
  name="dx106-937001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function TextToFloat(Buffer: PChar; Var Value: Extended): Boolean;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">TextToFloat </span>converts the string in <span 
class="cmtt-10">Buffer </span>to a floating point value. <span 
class="cmtt-10">Buffer </span>should
                                                                            

                                                                            
contain a valid stroing representation of a floating point value (either in decimal or scientific
notation). If the buffer contains a decimal value, then the decimal separator character can
either be a &#8217;.&#8217; or the value of the <span 
class="cmtt-10">DecimalSeparator </span>variable.
<!--l. 2733--><p class="noindent">The function returns <span 
class="cmtt-10">True </span>if the conversion was successful.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">If there is an invalid character in the buffer, then the function returns <span 
class="cmtt-10">False</span>
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">StrToFloat </span>(<a 
href="#x106-93400022.8">803<!--tex4ht:ref: se:TBufStream--></a>),<span 
class="cmss-10">FloatToStr </span>(<a 
href="#x106-91500022.8">779<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">FormatFloat </span>(<a 
href="#x106-92100022.8">794<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2741--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex91.pp</span><HR/><div class="listinginput">
<!--l. 2741--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example91;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">TextToFloat</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>   <span 
class="cmtt-10">{$mode</span>&nbsp;<span 
class="cmtt-10">objfpc}</span>
<br>   <span 
class="cmtt-10">{$h+</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">SysUtils;</span>
<br>
<br>   <span 
class="cmtt-10">Const</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">NrValues</span>&nbsp;<span 
class="cmtt-10">=</span>&nbsp;<span 
class="cmtt-10">5;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">TestStr</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Array[1..NrValues]</span>&nbsp;<span 
class="cmtt-10">of</span>&nbsp;<span 
class="cmtt-10">pchar</span>&nbsp;<span 
class="cmtt-10">=</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">('1,1','-0,2','1,2E-4','0','1E4');</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>
<br>   <span 
class="cmtt-10">Var</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">I</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Integer;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">E</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">Extended;</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Using</span>&nbsp;<span 
class="cmtt-10">DecimalSeparator</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',DecimalSeparator);</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">For</span>&nbsp;<span 
class="cmtt-10">I:=1</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">NrValues</span>&nbsp;<span 
class="cmtt-10">do</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Converting</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',TestStr[i]);</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">If</span>&nbsp;<span 
class="cmtt-10">TextToFloat(TestStr[i],E)</span>&nbsp;<span 
class="cmtt-10">then</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Converted</span>&nbsp;<span 
class="cmtt-10">value</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">',E)</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">else</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">Writeln('Unable</span>&nbsp;<span 
class="cmtt-10">to</span>&nbsp;<span 
class="cmtt-10">convert</span>&nbsp;<span 
class="cmtt-10">value.');</span>
<br>   &nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">end;</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">DecimalSeparator:=',';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">DecimalSeparator:='.';</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit;</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
                                                                            

                                                                            
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-944" name="x106-93800022.8">Trim</a></h4><a 
  name="dx106-938001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function Trim(const S: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Trim </span>strips blank characters (spaces) at the beginning and end of <span 
class="cmtt-10">S </span>and returns the resulting
string. Only <span 
class="cmtt-10">#32 </span>characters are stripped.
<!--l. 2750--><p class="noindent">If the string contains only spaces, an empty string is returned.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">TrimLeft </span>(<a 
href="#x106-93900022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimRight </span>(<a 
href="#x106-94000022.8">808<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2757--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex84.pp</span><HR/><div class="listinginput">
<!--l. 2757--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example84;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">Trim</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',Trim(S),'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">what</span>&nbsp;<span 
class="cmtt-10">gets</span>&nbsp;<span 
class="cmtt-10">lost</span>&nbsp;<span 
class="cmtt-10">?</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(#10#13'haha</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-945" name="x106-93900022.8">TrimLeft</a></h4><a 
  name="dx106-939001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function TrimLeft(const S: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">TrimLeft </span>strips blank characters (spaces) at the beginning of <span 
class="cmtt-10">S </span>and returns the resulting
string. Only <span 
class="cmtt-10">#32 </span>characters are stripped.
<!--l. 2767--><p class="noindent">If the string contains only spaces, an empty string is returned.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
                                                                            

                                                                            
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">Trim </span>(<a 
href="#x106-93800022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimRight </span>(<a 
href="#x106-94000022.8">808<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2774--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex85.pp</span><HR/><div class="listinginput">
<!--l. 2774--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example85;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">TrimLeft</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',TrimLeft(S),'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">what</span>&nbsp;<span 
class="cmtt-10">gets</span>&nbsp;<span 
class="cmtt-10">lost</span>&nbsp;<span 
class="cmtt-10">?</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(#10#13'haha</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-946" name="x106-94000022.8">TrimRight</a></h4><a 
  name="dx106-940001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function TrimRight(const S: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Trim </span>strips blank characters (spaces) at the end of <span 
class="cmtt-10">S </span>and returns the resulting string. Only
<span 
class="cmtt-10">#32 </span>characters are stripped.
<!--l. 2784--><p class="noindent">If the string contains only spaces, an empty string is returned.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">Trim </span>(<a 
href="#x106-93800022.8">807<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">TrimLeft </span>(<a 
href="#x106-93900022.8">807<!--tex4ht:ref: se:TBufStream--></a>)</dd></dl>
<!--l. 2791--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex86.pp</span><HR/><div class="listinginput">
<!--l. 2791--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example86;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">TrimRight</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>   <span 
class="cmtt-10">{$H+}</span>
<br>
                                                                            

                                                                            
<br>   <span 
class="cmtt-10">Procedure</span>&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(S</span>&nbsp;<span 
class="cmtt-10">:</span>&nbsp;<span 
class="cmtt-10">String);</span>
<br>
<br>   <span 
class="cmtt-10">begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">('&#34;',TrimRight(S),'&#34;');</span>
<br>   <span 
class="cmtt-10">end;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">ha</span>&nbsp;<span 
class="cmtt-10">what</span>&nbsp;<span 
class="cmtt-10">gets</span>&nbsp;<span 
class="cmtt-10">lost</span>&nbsp;<span 
class="cmtt-10">?</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">(#10#13'haha</span>&nbsp;<span 
class="cmtt-10">');</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Testit</span>&nbsp;<span 
class="cmtt-10">('</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span 
class="cmtt-10">');</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
<h4 class="subsectionHead"><a 
href="unitsli1.htm#QQ2-106-947" name="x106-94100022.8">UpperCase</a></h4><a 
  name="dx106-941001"></a>
<dl class="list1"><dt class="list">
<span 
class="cmss-10">Declaration:</span> </dt><dd 
class="list"><span 
class="cmtt-10">Function UpperCase(const s: string): string;</span>
</dd><dt class="list">
<span 
class="cmss-10">Description:</span> </dt><dd 
class="list"><span 
class="cmtt-10">UpperCase </span>returns the uppercase equivalent of <span 
class="cmtt-10">S</span>. Ansi characters are not taken into account,
only ASCII codes below 127 are converted. It is completely equivalent to the <span 
class="cmtt-10">UpCase </span>function
of the system unit, and is provided for compatiibility only.
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">None.
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"><span 
class="cmss-10">AnsiLowerCase </span>(<a 
href="#x106-89800022.8">766<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">LowerCase </span>(<a 
href="#x106-92800022.8">799<!--tex4ht:ref: se:TBufStream--></a>), <span 
class="cmss-10">AnsiUpperCase </span>(<a 
href="#x106-90700022.8">773<!--tex4ht:ref: se:TBufStream--></a>)
</dd><dt class="list">
<span 
class="cmss-10">Errors:</span> </dt><dd 
class="list">
</dd><dt class="list">
<span 
class="cmss-10">See also:</span> </dt><dd 
class="list"></dd></dl>
<!--l. 2811--><p class="noindent"><span 
class="cmssbx-10">Listing: </span><span 
class="cmss-10">sysutex/ex87.pp</span><HR/><div class="listinginput">
<!--l. 2811--><p class="noindent"><div class="obeylines-v">   <span 
class="cmtt-10">Program</span>&nbsp;<span 
class="cmtt-10">Example87;</span>
<br>
<br>   <span 
class="cmtt-10">{</span>&nbsp;<span 
class="cmtt-10">This</span>&nbsp;<span 
class="cmtt-10">program</span>&nbsp;<span 
class="cmtt-10">demonstrates</span>&nbsp;<span 
class="cmtt-10">the</span>&nbsp;<span 
class="cmtt-10">UpperCase</span>&nbsp;<span 
class="cmtt-10">function</span>&nbsp;<span 
class="cmtt-10">}</span>
<br>
<br>   <span 
class="cmtt-10">Uses</span>&nbsp;<span 
class="cmtt-10">sysutils;</span>
<br>
<br>   <span 
class="cmtt-10">Begin</span>
<br>   &nbsp;&nbsp;<span 
class="cmtt-10">Writeln</span>&nbsp;<span 
class="cmtt-10">(UpperCase('this</span>&nbsp;<span 
class="cmtt-10">will</span>&nbsp;<span 
class="cmtt-10">come</span>&nbsp;<span 
class="cmtt-10">OUT</span>&nbsp;<span 
class="cmtt-10">ALL</span>&nbsp;<span 
class="cmtt-10">uPpErCaSe</span>&nbsp;<span 
class="cmtt-10">!'));</span>
<br>   <span 
class="cmtt-10">End.</span>
</div></div><HR/>
                                                                            

                                                                            
<div class="crosslinks"><p class="noindent">[<a 
href="unitsse78.htm" >prev</a>] [<a 
href="unitsse78.htm#tailunitsse78.htm" >prev-tail</a>] [<a 
href="unitsse79.htm" >front</a>] [<a 
href="unitsch22.htm#unitsse79.htm" >up</a>] </p></div><a 
  name="tailunitsse79.htm"></a>   
</body></html> 
